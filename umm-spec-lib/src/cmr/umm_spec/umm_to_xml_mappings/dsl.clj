(ns cmr.umm-spec.umm-to-xml-mappings.dsl
  "Defines a DSL for generating XML from a source Clojure record.

  The DSL is used to specify content generator instructions. Content generator instructions generate
  parts of XML which could be single elements, multiple elements, or strings in the XML.
  Content generator instructions can take any of the following forms.

  ## Vector

  example: [:foo [:bar \"here\"]] => <foo><bar>here</bar></foo>

  A vector specifies that an element should be created. The first element of the vector is the tag
  name of the element. The rest of the contents of the vector are treated as a list of content
  generator instructions that specify the content of the element.

  A map immediately following the tag name (without a ::type) will be treated as attributes for the
  element. The attributes map is treated as a map of attribute names and values for the elemnt.

  ## String

  example: [:foo \"here\"] => <foo>here</foo>

  A string is treated as literal content and is usually used inside of another content generator
  instruction.

  ## Map with a :type key

  Maps with a namespaced type key are used to specifying various other types of content generator
  instructions with specific parameters that will be stored in the map as other keys. The maps are
  usually constructed with functions from this namespace. See individual functions for documentation.

  ## Functions

  Functions may be supplied wherever a content generator instruction is expected. The function will
  be called with the current xpath context, and will return another content generator instruction.")


(defn xpath
  "Specifies a content generator instruction that pulls a value from the source Clojure data
  at a given XPath."
  [value]
  {::type :xpath :value value})


(defn for-each
  "Specifies a content generator instruction that pulls multiple values from the source Clojure data
  at the given XPath. The template should be another content generator instruction that will be used
  to generate values for each of the values found at the xpath."
  [xpath template]
  {::type :for-each
   :xpath xpath
   :template template})

(defn char-string-from
  "Defines a mapping for a ISO CharacterString element with a value from the given XPath."
  [xpath-str]
  [:gco:CharacterString (xpath xpath-str)])

(defn char-string
  "Defines a mapping for a ISO CharacterString element with the given value."
  [value]
  [:gco:CharacterString value])

(defn matching-field
  "Returns an element mapping with an XML element name matching the corresponding UMM field."
  [k]
  [k (xpath (name k))])

(defn matching-object
  "Returns an element named by tag, with child XML elements generated by generators (keywords are
  treated as simple fields)."
  [tag & generators]
  (vec (cons tag generators)))
